<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Packages on Dive into Go</title><link>https://changhoi.github.io/dive-into-go/libraries/</link><description>Recent content in Packages on Dive into Go</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><atom:link href="https://changhoi.github.io/dive-into-go/libraries/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://changhoi.github.io/dive-into-go/libraries/time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://changhoi.github.io/dive-into-go/libraries/time/</guid><description>time 패키지는 시간을 측정하거나 보여주기 위해 사용한다. 깊은 구현 방식까지 탐구하고자 했으나, 아주 복잡한 wall clock, monotonic clock에 대해 깔끔하게 정리할 수 있는 재주가 없어서 우선 실용적인 레벨에서 사용 방법을 정리해봤다.
type Time # Time은 나노초 정밀도로 한 순간을 표현한다.
type Time struct { wall uint64 ext int64 loc *Location } wall값과 ext 값은 위에서 잠깐 언급한 wall clock의 초 단위, 나노초 단위로 변환하는 데 사용되고 선택적으로 monotonic clock을 나노초 단위에서 읽기 위해 사용된다.</description></item><item><title>context</title><link>https://changhoi.github.io/dive-into-go/libraries/context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://changhoi.github.io/dive-into-go/libraries/context/</guid><description>context 패키지는 Go 개발을 하다 보면 심심치 않게 만날 수 있다. 패키지의 공식문서에 따르면, 이 패키지의 주된 목표는 데드라인, 취소 신호 및 기타 요청 범위 값을 API 경계와 프로세스들 사이에 전달하는 컨텍스트 유형을 만들기 위해 사용한다.
Context 타입 # Context 타입은 다섯 가지의 메소드를 가지고 있는 인터페이스이다. Deadline, Err, Value, Done이 있다.
type Context interface { Deadline() (deadline time.Time, ok bool) Done() &amp;lt;-chan struct{} Err() error Value(key interface{}) interface{} } Deadline # 컨텍스트를 대신해 수행된 작업을 취소해야 하는 시간을 반환한다.</description></item><item><title>log</title><link>https://changhoi.github.io/dive-into-go/libraries/log/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://changhoi.github.io/dive-into-go/libraries/log/</guid><description>log 패키지는 로그 메시지를 유닉스 시스템 로그로 보내준다. 이번 장에서는 로그 수준과 종류를 설정해 로그를 시스템으로 보내는 방법을 정리하고 있다.
Unix 시스템 로그 # 일반적으로 Unix 시스템의 로그 파일은 대부분 /var/log 디렉토리에 있다. 로깅 해야 하는 정보들을 커맨드라인에 표시하지 않고, 파일에 기록하는 것이 좋은데, 그 이유는 다음과 같다.
영구 지속 유닉스 도구의 지원을 받아 검색 및 처리 가능 로그 서버 # 유닉스 시스템에서는 로그 파일을 로깅하는 분리된 서버 프로세스가 존재한다.</description></item></channel></rss>