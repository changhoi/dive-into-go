<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Basic on Dive into Go</title><link>https://changhoi.github.io/dive-into-go/basic/</link><description>Recent content in Basic on Dive into Go</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><atom:link href="https://changhoi.github.io/dive-into-go/basic/index.xml" rel="self" type="application/rss+xml"/><item><title>Module</title><link>https://changhoi.github.io/dive-into-go/basic/module/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://changhoi.github.io/dive-into-go/basic/module/</guid><description>Go는 1.11부터 모듈에 지원을 시작했다. Module은 Go의 새로운 의존성 관리 시스템으로, 의존성의 버전 정보를 명확하고 관리하기 쉽게 만든다. 모듈은 파일 트리에 저장되는 Go 패키지 모음으로, 루트에 go.mod 파일이 있다. Go 1.11부터, 진행 중인 디렉토리가 GOPATH 변수의 src 아래가 아닌 경우, go 명령어는 현재 디렉토리나 또는 상위 디렉토리가 go.mod 파일을 가지고 있을 때 모듈을 사용하도록 했다. 그리고 1.13 이후 모든 개발 환경에서 기본 모드로 모듈을 사용했다.
새로운 모듈 만들기 # GOPATH가 아닌 곧에 새로운 디렉토리를 만들고 패키지를 만들자.</description></item><item><title>Package</title><link>https://changhoi.github.io/dive-into-go/basic/package/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://changhoi.github.io/dive-into-go/basic/package/</guid><description>Go는 크든 작든 패키지들로 구성된다. 패키지는 Go로 작성된 코드를 말하고, 코드 시작점에 package 키워드를 사용해 이름을 지정한다. 그 중 main 패키지는 독립적인 프로그램으로서 동작하는 소스 코드임을 알리는 패키지이고, 이외 다른 패키지는 실행 파일을 만들 수 없다. 즉, 실행을 위해서는 main 패키지의 메인 함수에서 호출되어야 한다. main 패키지는 다른 패키지가 공존하는 곳만 아니라면 어디에 짜든 상관 없다.
프로그램을 짜다 보면, 어떤 시점에서는 결국 코드를 조직화 하고 분산시키기 위해 패키지를 만들어 사용해야 하는 시점이 있다.</description></item></channel></rss>