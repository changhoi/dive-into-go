<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dive into Go</title><link>https://changhoi.github.io/dive-into-go/</link><description>Recent content on Dive into Go</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><atom:link href="https://changhoi.github.io/dive-into-go/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://changhoi.github.io/dive-into-go/Insides/compiler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://changhoi.github.io/dive-into-go/Insides/compiler/</guid><description>이번 장은 컴파일러에 대해 아주 조금 더 깊게 공부해보자. 일반적으로 실행 파일을 만드는 명령어로 빌드까지 완성하기 때문에, 컴파일러만의 역할을 평소에 경험하기 어렵다. 컴파일러를 통해 오브젝트 파일을 만드는 것과 기타 옵션들에 대해 다룬다.
프로그램이 프로세스가 되기까지 #</description></item><item><title>log</title><link>https://changhoi.github.io/dive-into-go/packages/log/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://changhoi.github.io/dive-into-go/packages/log/</guid><description>log 패키지는 로그 메시지를 유닉스 시스템 로그로 보내준다. 이번 장에서는 로그 수준과 종류를 설정해 로그를 시스템으로 보내는 방법을 정리하고 있다.
Unix 시스템 로그 # 일반적으로 Unix 시스템의 로그 파일은 대부분 /var/log 디렉토리에 있다. 로깅 해야 하는 정보들을 커맨드라인에 표시하지 않고, 파일에 기록하는 것이 좋은데, 그 이유는 다음과 같다.
영구 지속 유닉스 도구의 지원을 받아 검색 및 처리 가능 로그 서버 # 유닉스 시스템에서는 로그 파일을 로깅하는 분리된 서버 프로세스가 존재한다.</description></item></channel></rss>