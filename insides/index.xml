<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Inside on Dive into Go</title><link>https://changhoi.github.io/dive-into-go/insides/</link><description>Recent content in Inside on Dive into Go</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><atom:link href="https://changhoi.github.io/dive-into-go/insides/index.xml" rel="self" type="application/rss+xml"/><item><title>Compiler</title><link>https://changhoi.github.io/dive-into-go/insides/compiler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://changhoi.github.io/dive-into-go/insides/compiler/</guid><description>이번 장은 컴파일러에 대해 아주 조금 더 깊게 공부해보자. 일반적으로 실행 파일을 만드는 명령어로 빌드까지 완성하기 때문에, 컴파일러만의 역할을 평소에 경험하기 어렵다. 컴파일러를 통해 오브젝트 파일을 만드는 것과 기타 옵션들에 대해 다룬다.
프로그램이 프로세스가 되기까지 # Go 컴파일러 # 컴파일러와 관련된 내용은 다음
Go 코드를 컴파일 해서 오브젝트 파일을 만들기 위해서는 go tool compile을 사용한다. 컴파일을 하면, 마치 C언어 컴파일 한 것처럼 확장자가 o인 바이너리 오브젝트 파일을 내보낸다.</description></item><item><title>Garbage Collection</title><link>https://changhoi.github.io/dive-into-go/insides/garbage-collection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://changhoi.github.io/dive-into-go/insides/garbage-collection/</guid><description>Garbage Collection # 쓰레기 수집. 이때 쓰레기는 Heap영역에서 더 이상 사용하지 못하는 메모리를 의미하며, 이 부분들을 수집해 해제하는 역할을 Garbage Collection이라고 한다.
이하 Garbage Collection은 GC로 표현한다.
GC는 일반적으로 다음 과정으로 동작한다.
GC 수행하는 스레드를 제외하고 모두 Stop the world 참조할 수 없는 객체에 대한 메모리 해제 GC 종료 및 스레드 작업 재개 Tricolor 알고리즘 # 많은 언어에서 Tricolor 알고리즘을 사용해 가비지 컬렉팅을 한다. Go 언어에서 이 알고리즘 명칭은 Tricolor Mark-and-Sweep 알고리즘이다.</description></item></channel></rss>